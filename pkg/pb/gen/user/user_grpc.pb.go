// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pkg/pb/protos/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_CreateProfile_FullMethodName        = "/user.UserService/CreateProfile"
	UserService_GetProfile_FullMethodName           = "/user.UserService/GetProfile"
	UserService_GetProfileFromOAuth_FullMethodName  = "/user.UserService/GetProfileFromOAuth"
	UserService_CheckMobileExistence_FullMethodName = "/user.UserService/CheckMobileExistence"
	UserService_CheckEmailExistence_FullMethodName  = "/user.UserService/CheckEmailExistence"
	UserService_IsAccountExist_FullMethodName       = "/user.UserService/IsAccountExist"
	UserService_GetLoginUserInfo_FullMethodName     = "/user.UserService/GetLoginUserInfo"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	GetProfileFromOAuth(ctx context.Context, in *GetProfileFromOAuthRequest, opts ...grpc.CallOption) (*GetProfileFromOAuthResponse, error)
	// 驗證 mobile number, email, account 是否存在
	CheckMobileExistence(ctx context.Context, in *MobileExistenceRequest, opts ...grpc.CallOption) (*ExistenceResponse, error)
	CheckEmailExistence(ctx context.Context, in *EmailExistenceRequest, opts ...grpc.CallOption) (*ExistenceResponse, error)
	IsAccountExist(ctx context.Context, in *IsAccountExistRequest, opts ...grpc.CallOption) (*ExistenceResponse, error)
	// 登入取得 user 資料 Request值不一定是
	GetLoginUserInfo(ctx context.Context, in *GetLoginUserInfoRequest, opts ...grpc.CallOption) (*GetLoginUserInfoResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProfileResponse)
	err := c.cc.Invoke(ctx, UserService_CreateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetProfileFromOAuth(ctx context.Context, in *GetProfileFromOAuthRequest, opts ...grpc.CallOption) (*GetProfileFromOAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileFromOAuthResponse)
	err := c.cc.Invoke(ctx, UserService_GetProfileFromOAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckMobileExistence(ctx context.Context, in *MobileExistenceRequest, opts ...grpc.CallOption) (*ExistenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistenceResponse)
	err := c.cc.Invoke(ctx, UserService_CheckMobileExistence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckEmailExistence(ctx context.Context, in *EmailExistenceRequest, opts ...grpc.CallOption) (*ExistenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistenceResponse)
	err := c.cc.Invoke(ctx, UserService_CheckEmailExistence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) IsAccountExist(ctx context.Context, in *IsAccountExistRequest, opts ...grpc.CallOption) (*ExistenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistenceResponse)
	err := c.cc.Invoke(ctx, UserService_IsAccountExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetLoginUserInfo(ctx context.Context, in *GetLoginUserInfoRequest, opts ...grpc.CallOption) (*GetLoginUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoginUserInfoResponse)
	err := c.cc.Invoke(ctx, UserService_GetLoginUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	GetProfileFromOAuth(context.Context, *GetProfileFromOAuthRequest) (*GetProfileFromOAuthResponse, error)
	// 驗證 mobile number, email, account 是否存在
	CheckMobileExistence(context.Context, *MobileExistenceRequest) (*ExistenceResponse, error)
	CheckEmailExistence(context.Context, *EmailExistenceRequest) (*ExistenceResponse, error)
	IsAccountExist(context.Context, *IsAccountExistRequest) (*ExistenceResponse, error)
	// 登入取得 user 資料 Request值不一定是
	GetLoginUserInfo(context.Context, *GetLoginUserInfoRequest) (*GetLoginUserInfoResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedUserServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedUserServiceServer) GetProfileFromOAuth(context.Context, *GetProfileFromOAuthRequest) (*GetProfileFromOAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileFromOAuth not implemented")
}
func (UnimplementedUserServiceServer) CheckMobileExistence(context.Context, *MobileExistenceRequest) (*ExistenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMobileExistence not implemented")
}
func (UnimplementedUserServiceServer) CheckEmailExistence(context.Context, *EmailExistenceRequest) (*ExistenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmailExistence not implemented")
}
func (UnimplementedUserServiceServer) IsAccountExist(context.Context, *IsAccountExistRequest) (*ExistenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAccountExist not implemented")
}
func (UnimplementedUserServiceServer) GetLoginUserInfo(context.Context, *GetLoginUserInfoRequest) (*GetLoginUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginUserInfo not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetProfileFromOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileFromOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfileFromOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetProfileFromOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfileFromOAuth(ctx, req.(*GetProfileFromOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckMobileExistence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MobileExistenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckMobileExistence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckMobileExistence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckMobileExistence(ctx, req.(*MobileExistenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckEmailExistence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailExistenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckEmailExistence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckEmailExistence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckEmailExistence(ctx, req.(*EmailExistenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_IsAccountExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAccountExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).IsAccountExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_IsAccountExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).IsAccountExist(ctx, req.(*IsAccountExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetLoginUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetLoginUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetLoginUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetLoginUserInfo(ctx, req.(*GetLoginUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfile",
			Handler:    _UserService_CreateProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _UserService_GetProfile_Handler,
		},
		{
			MethodName: "GetProfileFromOAuth",
			Handler:    _UserService_GetProfileFromOAuth_Handler,
		},
		{
			MethodName: "CheckMobileExistence",
			Handler:    _UserService_CheckMobileExistence_Handler,
		},
		{
			MethodName: "CheckEmailExistence",
			Handler:    _UserService_CheckEmailExistence_Handler,
		},
		{
			MethodName: "IsAccountExist",
			Handler:    _UserService_IsAccountExist_Handler,
		},
		{
			MethodName: "GetLoginUserInfo",
			Handler:    _UserService_GetLoginUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/protos/user/user.proto",
}
